Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 1
main.asm



      1	0000			     .model tiny
      2	0000			     .code
      3
      4				     org 100h
      5
      6				     LOCALS
      7
      8				     ; Constants ===========================
      9
     10	      =0005		     BASE_NAME_LEN equ 5
     11	      =0014		     MAX_INP_LEN equ 20
     12	      =0014		     MAX_OUT_LEN equ 20
     13	      =0013		     MAX_NUM_LEN equ 19	     ; Maximum is needed for binary number. 16 is for number, 1	is for length
     14							     ;							      1	for 'b'	or  +
     15				     'o' or 'h'
     16							     ;							      1	for '$'
     17
     18	      =0002		     x1	= 2
     19	      =004C		     x2	= 76
     20
     21	      =0002		     y1	= 2
     22	      =0016		     y2	= 22
     23
     24	      =0144		     lu_coord =	(80 * y1 + x1) * 2
     25	      =0DC4		     ld_coord =	(80 * y2 + x1) * 2
     26	      =01D8		     ru_coord =	(80 * y1 + x2) * 2
     27	      =0E58		     rd_coord =	(80 * y2 + x2) * 2
     28
     29
     30	      =0004		     kx1 = 4
     31	      =004A		     kx2 = 74
     32
     33	      =000C		     ky1 = 12
     34	      =0014		     ky2 = 20
     35
     36	      =0004		     key_len = 4
     37	      =0008		     key_height	= 8
     38	      =0011		     num_keys =	17
     39	      =0007		     num_dies =	7
     40
     41
     42	      =B800		     videomem =	0b800h
     43
     44	      =00BA		     vert_side	= 0bah	     ; vertical	side
     45	      =00CD		     horiz_side	= 0cdh	     ; horizontal side
     46
     47	      =00CA		     triangle_up   = 0cah
     48	      =00CB		     triangle_down = 0cbh
     49
     50	      =00C9		     lu_corn = 0c9h  ; left-up
     51	      =00C8		     ld_corn = 0c8h  ; left-down
     52	      =00BB		     ru_corn = 0bbh  ; right-up
     53	      =00BC		     rd_corn = 0bch  ; right-down
     54
     55	      =0020		     space = 20h     ; free space
     56
     57	      =00B0		     shadow_30 = 0b0h	     ; 30 %
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 2
main.asm



     58	      =00B1		     shadow_50 = 0b1h	     ; 50 %
     59	      =00B2		     shadow_70 = 0b2h	     ; 70 %
     60
     61
     62	      =0042		     Gate2   equ  42h
     63	      =0043		     CmdReg  equ  43h
     64	      =0061		     PortB   equ  61h
     65
     66	      =F9CB		     WaitLow  equ 0F9CBh     ; In microseconds (10^-6)
     67	      =0008		     WaitHigh equ 0008h	     ; In microseconds (10^-6)
     68
     69	      =	1193100		     MainFreq equ 1193100
     70
     71				     ; Notes:
     72
     73					     ;C2     equ MainFreq / 65
     74					     ;C2_sh  equ MainFreq / 69
     75					     ;D2     equ MainFreq / 73
     76					     ;E2_fl  equ MainFreq / 78
     77					     ;E2     equ MainFreq / 82
     78					     ;F2     equ MainFreq / 87
     79					     ;F2_sh  equ MainFreq / 92
     80					     ;G2     equ MainFreq / 98
     81					     ;G2_sh  equ MainFreq / 104
     82					     ;A2     equ MainFreq / 110
     83					     ;B2_fl  equ MainFreq / 117
     84					     ;B2     equ MainFreq / 124
     85
     86	      =	1193100	/ 131		     C3	     equ MainFreq / 131
     87	      =	1193100	/ 139		     C3_sh   equ MainFreq / 139
     88	      =	1193100	/ 147		     D3	     equ MainFreq / 147
     89	      =	1193100	/ 156		     E3_fl   equ MainFreq / 156
     90	      =	1193100	/ 165		     E3	     equ MainFreq / 165
     91	      =	1193100	/ 175		     F3	     equ MainFreq / 175
     92	      =	1193100	/ 185		     F3_sh   equ MainFreq / 185
     93	      =	1193100	/ 196		     G3	     equ MainFreq / 196
     94	      =	1193100	/ 208		     G3_sh   equ MainFreq / 208
     95	      =	1193100	/ 220		     A3	     equ MainFreq / 220
     96	      =	1193100	/ 233		     B3_fl   equ MainFreq / 233
     97	      =	1193100	/ 247		     B3	     equ MainFreq / 247
     98
     99	      =	1193100	/ 262		     C4	     equ MainFreq / 262
    100	      =	1193100	/ 277		     C4_sh   equ MainFreq / 277
    101	      =	1193100	/ 294		     D4	     equ MainFreq / 294
    102	      =	1193100	/ 311		     E4_fl   equ MainFreq / 311
    103	      =	1193100	/ 330		     E4	     equ MainFreq / 330
    104	      =	1193100	/ 349		     F4	     equ MainFreq / 349
    105	      =	1193100	/ 370		     F4_sh   equ MainFreq / 370
    106	      =	1193100	/ 392		     G4	     equ MainFreq / 392
    107	      =	1193100	/ 415		     G4_sh   equ MainFreq / 415
    108	      =	1193100	/ 440		     A4	     equ MainFreq / 440
    109	      =	1193100	/ 466		     B4_fl   equ MainFreq / 466
    110	      =	1193100	/ 494		     B4	     equ MainFreq / 494
    111
    112	      =000A			     P	     equ 10
    113
    114				     ;======================================
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 3
main.asm



    115
    116
    117
    118
    119	0100			     Start:
    120	0100  E8 043F			     call DrawFrame	     ; Drawing a frame
    121	0103  E8 0256			     call DrawKeys
    122
    123	0106  33 DB			     xor bx, bx	     ; bx = 0
    124	0108  8E C3			     mov es, bx	     ; Moving to standart BIOS segment (es = 0)
    125	010A  BB 0024			     mov bx, 9*4     ; Set offset to the part of segment which contains	what to	do with	    +
    126				     keyboard interrupt
    127
    128	010D  E8 00AD			     call ChangeIntFunc
    129	0110  E8 00C5			     call LoadProg
    130
    131	0113  B8 4C00			     mov ax, 4c00h
    132	0116  CD 21			     int 21h
    133
    134					     include resident.asm
1   135	0118				     Toxic proc
1   136	0118  50 53 56 57 1E 06			     push ax bx	si di ds es
1   137
1   138	011E  E8 0088				     call GetCode
1   139	0121  E8 00C6				     call ShowNumber
1   140
1   141	0124  3C 1E				     cmp al, 30
1   142	0126  74 54				     je	StopPiano
1   143
1   144	0128  3C 1F				     cmp al, 31
1   145	012A  74 4A				     je	StartPiano
1   146
1   147
1   148	012C  3C 03				     cmp al, 3
1   149	012E  73 03				     jae CheckPress_h
1   150	0130  EB 0B 90				     jmp CheckRelease_l
1   151
1   152	0133				     CheckPress_h:
1   153	0133  E8 0073				     call GetCode
1   154	0136  3C 0B				     cmp al, 11
1   155	0138  76 48				     jbe Press
1   156	013A  EB 01 90				     jmp CheckRelease_l
1   157
1   158	013D				     CheckRelease_l:
1   159	013D  E8 0069				     call GetCode
1   160	0140  3C 83				     cmp al, 131
1   161	0142  73 03				     jae CheckRelease_h
1   162	0144  EB 0B 90				     jmp CheckUpPress_l
1   163
1   164	0147				     CheckRelease_h:
1   165	0147  E8 005F				     call GetCode
1   166	014A  3C 8B				     cmp al, 139
1   167	014C  76 3D				     jbe Release
1   168	014E  EB 01 90				     jmp CheckUpPress_l
1   169
1   170
1   171
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 4
main.asm



1   172	0151				     CheckUpPress_l:
1   173	0151  3C 10				     cmp al, 16
1   174	0153  73 03				     jae CheckUpPress_h
1   175	0155  EB 0B 90				     jmp CheckUpRelease_l
1   176
1   177	0158				     CheckUpPress_h:
1   178	0158  E8 004E				     call GetCode
1   179	015B  3C 19				     cmp al, 25
1   180	015D  76 23				     jbe Press
1   181	015F  EB 01 90				     jmp CheckUpRelease_l
1   182
1   183	0162				     CheckUpRelease_l:
1   184	0162  E8 0044				     call GetCode
1   185	0165  3C 90				     cmp al, 144
1   186	0167  73 03				     jae CheckUpRelease_h
1   187	0169  EB 33 90				     jmp StdEnd
1   188
1   189	016C				     CheckUpRelease_h:
1   190	016C  E8 003A				     call GetCode
1   191	016F  3C 99				     cmp al, 153
1   192	0171  76 18				     jbe Release
1   193	0173  EB 29 90				     jmp StdEnd
1   194
1   195
1   196	0176				     StartPiano:
1   197	0176  E8 0195				     call SetTimer
1   198	0179  EB 19 90				     jmp SpecialEnd
1   199
1   200	017C				     StopPiano:
1   201	017C  E8 01B0				     call ResetTimer
1   202	017F  EB 13 90				     jmp SpecialEnd
1   203
1   204
1   205
1   206	0182				     Press:
1   207	0182  E8 0156				     call SetNote
1   208	0185  E8 01E2				     call DrawKeyPress
1   209	0188  EB 0A 90				     jmp SpecialEnd
1   210
1   211	018B				     Release:
1   212	018B  E8 0179				     call SetPause
1   213	018E  E8 01CB				     call DrawKeys
1   214	0191  EB 01 90				     jmp SpecialEnd
1   215
1   216
1   217
1   218	0194				     SpecialEnd:
1   219	0194  E8 0017				     call TalkToPorts
1   220
1   221	0197  07 1F 5F 5E 5B 58			     pop es ds di si bx	ax
1   222	019D  CF				     iret	     ; InteraptReturn -	Возвращаемся с учётом и	сегмента и смещения,+
    223				     вытащив перед этим	флаги из стека (они кладутся туда при каждом прерывании)
1   224
1   225	019E				     StdEnd:
1   226	019E  07 1F 5F 5E 5B 58			     pop es ds di si bx	ax
1   227
1   228	01A4  EA				     db	0eah	     ; Вызывает	jump far который требует после себя адрсов
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 5
main.asm



1   229	01A5  0000		     old_ofs	     dw	0	     ; а вот и адреса
1   230	01A7  0000		     old_seg	     dw	0	     ; их мы кладём в начале проги
1   231
1   232	01A9				     endp
1   233
1   234
1   235
1   236					     ;==================================================================
1   237					     ; Requires: End_of_Prog label after "Toxic" function that will process interrupt
1   238					     ;
1   239					     ; Returns:	 Making	programm resident (not deleting	it from	memory)
1   240					     ;		 so code of "Toxic" function can be executed after programms end
1   241					     ;
1   242					     ; Damages:	 ax, dx
1   243					     ;==================================================================
1   244	01A9				     GetCode proc
1   245	01A9  E4 60				     in	al, 60h	      ;	Reading	Keyboard Port (returns most recent scancode)
1   246	01AB  32 E4				     xor ah, ah
1   247	01AD  C3			     ret
1   248	01AE				     endp
1   249
1   250
1   251
1   252					     ;==================================================================
1   253					     ; Requires: ----
1   254					     ;
1   255					     ; Returns:	 Turning off some features of Keyboard,	and turning on keyboard
1   256					     ;		 also telling Interrupt	Controller that	interrupt ended
1   257					     ;
1   258					     ; Damages:	 al
1   259					     ;==================================================================
1   260	01AE				     TalkToPorts proc
1   261	01AE  E4 61				     in	al, 61h	     ; Reading Keyboard	Command	Lines
1   262	01B0  0C 80				     or	al, 80h	     ; Turn 4-7	bits of	61 PPI port to 1
1   263	01B2  E6 61				     out 61h, al
1   264	01B4  24 7F				     and al, 7Fh     ; Enable keyboard (turn 7-th bit of 61 PPI	port to	0)
1   265	01B6  E6 61				     out 61h, al
1   266
1   267	01B8  B0 20				     mov al, 20h     ; Sending End-of-Interrupt	signal
1   268	01BA  E6 20				     out 20h, al     ; to the Interrupt	controller
1   269	01BC  C3			     ret
1   270	01BD				     endp
1   271
1   272
1   273
1   274					     ;==================================================================
1   275					     ; Requires: standart BIOS segment in es, offset to	memory that contains info
1   276					     ;		 about what to do after	interrupt in bx
1   277					     ;
1   278					     ; Returns:	 instead of standart function, "Toxic" will be called to process interrupt
1   279					     ;
1   280					     ; Damages:	 ax
1   281					     ;==================================================================
1   282	01BD				     ChangeIntFunc proc
1   283	01BD  FA				     cli		     ; Disable system interrupts
1   284	01BE  26: 8B 07				     mov ax, es:[bx]
1   285	01C1  A3 01A5r				     mov old_ofs, ax	     ; Moving offset of	old function that used to execute at+
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 6
main.asm



    286				     9-th interrupt
1   287	01C4  26: 8B 47	02			     mov ax, es:[bx + 2]
1   288	01C8  A3 01A7r				     mov old_seg, ax	     ; Moving code segment in which this function is
1   289
1   290	01CB  26: C7 07	0118r			     mov es:[bx], offset Toxic
1   291									     ;
1   292	01D0  8C C8				     mov ax, cs		     ; <---- If	we enter something here	without	disabling   +
    293				     system interrupts
1   294									     ;	     some random code (with offset Toxic from	    +
    295				     standart BIOS segment) will execute
1   296	01D2  26: 89 47	02			     mov es:[bx	+ 2], ax
1   297	01D6  FB				     sti		     ; Enable system interrupts
1   298	01D7  C3			     ret
1   299	01D8				     endp
1   300
1   301
1   302
1   303					     ;==================================================================
1   304					     ; Requires: End_of_Prog label after "Toxic" function that will process interrupt
1   305					     ;
1   306					     ; Returns:	 Making	programm resident (not deleting	it from	memory)
1   307					     ;		 so code of "Toxic" function can be executed after programms end
1   308					     ;
1   309					     ; Damages:	 ax, dx
1   310					     ;==================================================================
1   311	01D8				     LoadProg proc
1   312	01D8  B8 3100				     mov ax, 3100h		     ; Make program resident, so it will stay in    +
    313				     memory and	execute
1   314	01DB  BA 0542r				     mov dx, offset End_of_Prog
1   315	01DE  D1 EA D1 EA D1 EA	D1+		     shr dx, 4			     ; Division	by 16 (it needs	for 31 func of 21   +
    316	      EA		     interrupt)
1   317	01E6  42				     inc dx
1   318	01E7  CD 21				     int 21h
1   319	01E9  C3			     ret
1   320	01EA				     endp
    321					     include numout.asm
1   322					     ;==================================================================
1   323					     ; Requires: decimal number	(up to 65535) to convert in three number systems
1   324					     ;		 and print on screen in	ax
1   325					     ;
1   326					     ; Returns:	 ----
1   327					     ;
1   328					     ; Notes:
1   329					     ;
1   330					     ; Damages:	 all
1   331					     ;==================================================================
1   332	01EA				     ShowNumber	proc
1   333	01EA  53 51 52 56 57 1E	06+		     push bx cx	dx si di ds es ax
    334	      50
1   335	01F2  8C C8				     mov ax, cs
1   336	01F4  8E D8				     mov ds, ax
1   337	01F6  8E C0				     mov es, ax
1   338	01F8  58				     pop ax
1   339
1   340	01F9  50				     push ax
1   341	01FA  BB 000A				     mov bx, 10			     ; Base of system number to	convert
1   342	01FD  BF 01E6				     mov di, lu_coord +	160 + 2	     ; Offest of message in VideoMemory
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 7
main.asm



1   343	0200  E8 002A				     call NumberProcessing
1   344	0203  58				     pop ax
1   345
1   346	0204  50				     push ax
1   347	0205  BB 0002				     mov bx, 2
1   348	0208  BF 024C				     mov di, ru_coord +	80 * 2 - 22 * 2
1   349	020B  E8 001F				     call NumberProcessing
1   350	020E  58				     pop ax
1   351
1   352	020F  50				     push ax
1   353	0210  BB 0008				     mov bx, 8
1   354	0213  BF 02EC				     mov di, ru_coord +	160 * 2	- 22 * 2
1   355	0216  E8 0014				     call NumberProcessing
1   356	0219  58				     pop ax
1   357
1   358	021A  50				     push ax
1   359	021B  BB 0010				     mov bx, 16
1   360	021E  BF 038C				     mov di, ru_coord  + 240 * 2 - 22 *	2
1   361	0221  E8 0009				     call NumberProcessing
1   362	0224  58				     pop ax
1   363
1   364	0225  07 1F 5F 5E 5A 59	5B		     pop es ds di si dx	cx bx
1   365	022C  C3			     ret
1   366	022D				     endp
1   367
1   368
1   369					     ;==================================================================
1   370					     ; Requires: decimal number	(up to 65535) to convert in three number systems
1   371					     ;		 and print on screen in	ax
1   372					     ;
1   373					     ; Returns:	 pointer in si on the length of	number and beginning of	number in si + 1
1   374					     ;
1   375					     ; Notes:
1   376					     ;
1   377					     ; Damages:	 ----
1   378					     ;==================================================================
1   379	022D				     NumberProcessing proc
1   380
1   381	022D  57				     push di		     ; There is	offset in di
1   382	022E  E8 003A				     call WriteSystem
1   383	0231  E8 0007				     call Convert	     ; Adding to output	number in another number system
1   384	0234  5F				     pop di
1   385
1   386	0235  B4 0D				     mov ah, 0Dh	     ; Colour of text to print
1   387	0237  E8 006E				     call PushToVideo	     ; Pushing string in VideoMemory
1   388	023A  C3			     ret
1   389	023B				     endp
1   390
1   391
1   392
1   393					     ;====================================================================
1   394					     ; Requires: decimal number	(up to 65535) to convert in ax,	pointer	on
1   395					     ;		 output	message	in si and base of new number system in bx
1   396					     ;
1   397					     ;
1   398					     ; Returns:	 pointer in si on output message, that contains
1   399					     ;
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 8
main.asm



1   400					     ; Notes:
1   401					     ;
1   402					     ; Damages:	 ax, bx, cx, dx, si
1   403					     ;====================================================================
1   404	023B				     Convert proc
1   405
1   406	023B  33 C9				     xor cx, cx
1   407	023D  33 D2				     xor dx, dx	     ; For division error, when	(dx, ax) / bx is too big for ax
1   408
1   409	023F				 digit_proc:
1   410	023F  F7 F3				     div bx
1   411
1   412	0241  E8 0012				     call NumInChar
1   413	0244  52				     push dx
1   414	0245  33 D2				     xor dx, dx
1   415
1   416	0247  41				     inc cx
1   417	0248  0B C0				     or	ax, ax
1   418	024A  75 F3				     jnz digit_proc
1   419
1   420	024C  00 4C FF				     add [si - 1], cl
1   421
1   422	024F				 digit_push:
1   423	024F  5A				     pop dx
1   424	0250  88 15				     mov [di], dl
1   425	0252  47				     inc di
1   426	0253  E2 FA				     loop digit_push
1   427
1   428	0255  C3			     ret
1   429	0256				     endp
1   430
1   431
1   432					     ;==================================================================
1   433					     ; Requires: decimal number	(up to 15) to convert in dx
1   434					     ;
1   435					     ; Returns:	 symbol	(it's code) in dx, that	displays that number
1   436					     ;
1   437					     ; Notes:	 That is more universal, then using "add dx, '0'" in
1   438					     ;		 Bin and Octal converting, but it's longer by 5	operations
1   439					     ;
1   440					     ; Damages:	 ----
1   441					     ;==================================================================
1   442	0256				     NumInChar proc
1   443	0256  83 FA 0A				     cmp dx, 10
1   444	0259  72 03				     jb	 easy
1   445	025B  EB 07 90				     jmp hard
1   446
1   447	025E  83 C2 30			     easy:   add dx, '0'
1   448	0261  EB 07 90				     jmp return
1   449
1   450	0264  83 EA 0A			     hard:   sub dx, 10
1   451	0267  83 C2 41				     add dx, 'A'
1   452
1   453	026A				     return:
1   454
1   455	026A  C3			     ret
1   456	026B				     endp
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 9
main.asm



1   457
1   458
1   459
1   460					     ;==================================================================
1   461					     ; Requires: decimal number, base of number	system in bx (2, 8 or 16)
1   462					     ;
1   463					     ; Returns:	 ----
1   464					     ;
1   465					     ; Notes:	 Writes	number system name in bytes with adress	in si
1   466					     ;
1   467					     ; Damages:	 si, di
1   468					     ;==================================================================
1   469	026B				     WriteSystem proc
1   470
1   471	026B  BF 052Er				     mov di, offset Output
1   472	026E  C6 05 05				     mov byte ptr [di],	BASE_NAME_LEN
1   473	0271  47				     inc di
1   474
1   475	0272  83 FB 0A				     cmp bx, 10
1   476	0275  74 0F				     je	dec
1   477
1   478	0277  83 FB 02				     cmp bx, 2
1   479	027A  74 10				     je	bin
1   480	027C  83 FB 08				     cmp bx, 8
1   481	027F  74 11				     je	oct
1   482	0281  83 FB 10				     cmp bx, 16
1   483	0284  74 12				     je	hex
1   484
1   485	0286  BE 02C7r				dec: mov si, offset Base_dec
*Warning* numout.asm(163) Reserved word	used as	symbol:	DEC
1   486	0289  EB 13 90				     jmp write_base
1   487
1   488	028C  BE 02CCr				bin: mov si, offset Base_bin
1   489	028F  EB 0D 90				     jmp write_base
1   490
1   491	0292  BE 02D1r				oct: mov si, offset Base_oct
1   492	0295  EB 07 90				     jmp write_base
1   493
1   494	0298  BE 02D6r				hex: mov si, offset Base_hex
1   495	029B  EB 01 90				     jmp write_base
1   496
1   497
1   498	029E  8A 4D FF			 write_base: mov cl, byte ptr [di - 1]
1   499	02A1  32 ED				     xor ch, ch
1   500
1   501	02A3  57				     push di
1   502	02A4  F3> A4				     rep movsb
1   503	02A6  5E				     pop si
1   504
1   505	02A7  C3			     ret
1   506	02A8				     endp
1   507
1   508
1   509
1   510					     ;==================================================================
1   511					     ; Requires: buffer	in si, buffer length in	cx, colour in ah
1   512					     ;
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 10
main.asm



1   513					     ; Returns:	 string	in VideoMemory
1   514					     ;
1   515					     ; Notes:
1   516					     ;
1   517					     ; Damages:	 ax, cx, dx, es, si, di
1   518					     ;==================================================================
1   519	02A8				     PushToVideo proc
1   520
1   521	02A8  06				     push es
1   522
1   523	02A9  BA B800				     mov dx, videomem
1   524	02AC  8E C2				     mov es, dx
1   525
1   526	02AE  8A 4C FF				     mov cl, [si - 1]
1   527	02B1  32 ED				     xor ch, ch
1   528	02B3  BA 0014				     mov dx, MAX_INP_LEN
1   529	02B6  2B D1				     sub dx, cx
1   530	02B8  FC				     cld
1   531
1   532	02B9  AC		      out_symb_forw: lodsb
1   533	02BA  AB				     stosw
1   534	02BB  E2 FC				     loop out_symb_forw
1   535
1   536	02BD  8B CA				     mov cx, dx
1   537	02BF  B4 00				     mov ah, 00h
1   538
1   539	02C1  AC			     clean:  lodsb
1   540	02C2  AB				     stosw
1   541	02C3  E2 FC				     loop clean
1   542
1   543	02C5  07				     pop es
1   544	02C6  C3			     ret
1   545	02C7				     endp
1   546
1   547	02C7  69 6E 70 3A 20	     Base_dec: db 'inp:	'
1   548
1   549	02CC  62 69 6E 3A 20	     Base_bin: db 'bin:	'
1   550
1   551	02D1  6F 63 74 3A 20	     Base_oct: db 'oct:	'
1   552
1   553	02D6  68 65 78 3A 20	     Base_hex: db 'hex:	'
    554					     include mksound.asm
1   555					     ;========================================
1   556					     ; Requires: scancode of input symbal in ax
1   557					     ;
1   558					     ; Returns:	 ----
1   559					     ;
1   560					     ; Damages:	 ax, si
1   561					     ;========================================
1   562	02DB				     SetNote proc
1   563	02DB  1E 06 50				     push ds es	ax
1   564	02DE  8C C8				     mov ax, cs
1   565	02E0  8E D8				     mov ds, ax
1   566	02E2  8E C0				     mov es, ax
1   567	02E4  58				     pop ax
1   568
1   569	02E5  50				     push ax
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 11
main.asm



1   570	02E6  3D 000F				     cmp ax, 15
1   571	02E9  72 09				     jb	Up
1   572
1   573	02EB  BE 0348r				     mov si, offset NotesDown
1   574	02EE  2D 0010				     sub ax, 16
1   575	02F1  EB 07 90				     jmp Choose
1   576
1   577	02F4  BE 0336r			     Up:     mov si, offset NotesUp
1   578	02F7  48				     dec ax
1   579	02F8  48				     dec ax
1   580	02F9  48				     dec ax
1   581
1   582	02FA				     Choose:
1   583	02FA  D1 E0				     shl ax, 1
1   584	02FC  03 F0				     add si, ax
1   585	02FE  8B 04				     mov ax, [si]
1   586	0300  E8 0016				     call PlayNote
1   587
1   588	0303  58 07 1F				     pop ax es ds
1   589	0306  C3			     ret
1   590	0307				     endp
1   591
1   592
1   593
1   594					     ;========================================
1   595					     ; Requires: defined PortbB	and CmdReg
1   596					     ;
1   597					     ; Returns:	 ----
1   598					     ;
1   599					     ; Damages:	 al
1   600					     ;========================================
1   601	0307				     SetPause proc
1   602	0307  B8 000A				     mov ax, P
1   603	030A  E8 000C				     call PlayNote
1   604	030D  C3			     ret
1   605	030E				     endp
1   606
1   607
1   608
1   609					     ;========================================
1   610					     ; Requires: defined PortbB	and CmdReg
1   611					     ;
1   612					     ; Returns:	 ----
1   613					     ;
1   614					     ; Damages:	 al
1   615					     ;========================================
1   616	030E				     SetTimer proc
1   617	030E  E4 61				     in	al, PortB
1   618	0310  0C 03				     or	al, 00000011b
1   619	0312  E6 61				     out PortB,	al	     ; Enabling	second channel and speaker
1   620
1   621	0314  B0 B6				     mov al, 10110110b	     ; Moving second channel to	third mode
1   622	0316  E6 43				     out CmdReg, al
1   623	0318  C3			     ret
1   624	0319				     endp
1   625
1   626
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 12
main.asm



1   627
1   628					     ;========================================
1   629					     ; Requires: defined Gate2,	note (freq) to play in ax
1   630					     ;
1   631					     ; Returns:	 ----
1   632					     ;
1   633					     ; Damages:	 ax
1   634					     ;========================================
1   635	0319				     PlayNote proc
1   636
1   637	0319  E6 42				     out Gate2,	al
1   638	031B  8A C4				     mov al, ah
1   639	031D  E6 42				     out Gate2,	al
1   640	031F  C3			     ret
1   641	0320				     endp
1   642
1   643
1   644
1   645					     ;========================================
1   646					     ; Requires: defined Gate2
1   647					     ;
1   648					     ; Returns:	 ----
1   649					     ;
1   650					     ; Damages:	 ax, bx, cx, dx
1   651					     ;========================================
1   652	0320				     Waiting proc
1   653	0320  8B D9				     mov bx, cx
1   654
1   655	0322  B4 86				     mov ah, 86h
1   656
1   657	0324  B9 0008				     mov cx, WaitHigh
1   658	0327  BA F9CB				     mov dx, WaitLow
1   659
1   660	032A  CD 15				     int 15h
1   661
1   662	032C  8B CB				     mov cx, bx
1   663	032E  C3			     ret
1   664	032F				     endp
1   665
1   666
1   667
1   668					     ;========================================
1   669					     ; Requires: defined PortB
1   670					     ;
1   671					     ; Returns:	 ----
1   672					     ;
1   673					     ; Damages:	 al
1   674					     ;========================================
1   675	032F				     ResetTimer	proc
1   676	032F  E4 61				     in	al, PortB
1   677	0331  24 FC				     and al, 11111100b
1   678	0333  E6 61				     out PortB,	al		    ; Enabling second channel and speaker
1   679	0335  C3			     ret
1   680	0336				     endp
1   681
1   682	0336  2187 1DE0	000A 1931 +	     NotesUp	     dw	C3_sh, E3_fl, P, F3_sh,	G3_sh, B3_fl, P, C4_sh,	E4_fl
    683	      1668 1400	000A 10D3 +
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 13
main.asm



    684	      0EFC
1   685	0348  2393 1FB4	1C3E 1AA1 +	     NotesDown	     dw	C3, D3,	E3, F3,	G3, A3,	B3, C4,	D4, E4
    686	      17C7 152F	12DE 11C9 +
    687	      0FDA 0E1F
    688					     include mkkeys.asm
1   689					     ;========================================
1   690					     ; Requires: defined x1, x2, y1, y2
1   691					     ;
1   692					     ; Returns:	 ----
1   693					     ;
1   694					     ; Damages:	 ax, bx, cx, es, di
1   695					     ;========================================
1   696	035C				     DrawKeys proc
1   697
1   698	035C  06				     push es
1   699	035D  BB B800				     mov bx, videomem
1   700	0360  8E C3				     mov es, bx			     ; Jump to videosegment
1   701
1   702	0362  E8 00B9				     call ClearKeys
1   703	0365  E8 00D0				     call DrawKeyBorders
1   704	0368  07				     pop es
1   705
1   706	0369  C3			     ret
1   707	036A				     endp
1   708
1   709
1   710
1   711					     ;========================================
1   712					     ; Requires: scan code in ax
1   713					     ;
1   714					     ; Returns:	 ----
1   715					     ;
1   716					     ; Damages:	 ax, bx, cx, es, di
1   717					     ;========================================
1   718	036A				     DrawKeyPress proc
1   719
1   720	036A  06				     push es
1   721	036B  BB B800				     mov bx, videomem
1   722	036E  8E C3				     mov es, bx			     ; Jump to videosegment
1   723
1   724	0370  50				     push ax
1   725	0371  3D 000F				     cmp ax, 15
1   726	0374  77 10				     ja	@@Down
1   727	0376  3D 0005				     cmp ax, 5
1   728	0379  74 0E				     je	@@continue
1   729	037B  3D 0009				     cmp ax, 9
1   730	037E  74 09				     je	@@continue
1   731
1   732	0380  E8 0009				     call DrawShadowUp
1   733	0383  EB 04 90				     jmp @@continue
1   734
1   735	0386				     @@Down:
1   736	0386  E8 004B				     call DrawShadowDown
1   737
1   738	0389				     @@continue:
1   739	0389  58				     pop ax
1   740
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 14
main.asm



1   741	038A  07				     pop es
1   742
1   743	038B  C3			     ret
1   744	038C				     endp
1   745
1   746
1   747					     ;========================================
1   748					     ; Requires: defined x1, x2, y1, y2
1   749					     ;
1   750					     ; Returns:	 ----
1   751					     ;
1   752					     ; Damages:	 ax, bx, cx, es, di
1   753					     ;========================================
1   754	038C				     DrawShadowUp proc
1   755	038C  2D 0003				     sub ax, 3
1   756	038F  3D 0003				     cmp ax, 3
1   757	0392  72 08				     jb	@@first
1   758	0394  3D 0007				     cmp ax, 7
1   759	0397  72 0B				     jb	@@second
1   760	0399  EB 14 90				     jmp @@third
1   761
1   762
1   763	039C				     @@first:
1   764	039C  BF 0832				     mov di, (80 * (ky1	+ 1) + kx1 + 1 + key_len) * 2	     ; Coordinates of start
1   765	039F  8B C8				     mov cx, ax
1   766	03A1  EB 14 90				     jmp @@to_right_key
1   767
1   768	03A4				     @@second:
1   769	03A4  BF 085A				     mov di, (80 * (ky1	+ 1) + kx1 + 1 + 6 * (key_len))	* 2
1   770	03A7  2D 0003				     sub ax, 3
1   771	03AA  8B C8				     mov cx, ax
1   772	03AC  EB 09 90				     jmp @@to_right_key
1   773
1   774	03AF				     @@third:
1   775	03AF  BF 0892				     mov di, (80 * (ky1	+ 1) + kx1 + 1 + 13 * (key_len)) * 2
1   776	03B2  2D 0007				     sub ax, 7
1   777	03B5  8B C8				     mov cx, ax
1   778
1   779
1   780	03B7				     @@to_right_key:
1   781	03B7  83 C7 10				     add di, (key_len) * 2 * 2
1   782	03BA  E2 FB				     loop @@to_right_key
1   783
1   784	03BC  B4 3B				     mov ah, 3Bh
1   785	03BE  B0 B1				     mov al, shadow_50	     ; Space symbol
1   786
1   787	03C0  B9 0004				     mov cx, key_height	- 4
1   788
1   789	03C3					     @@fill:
1   790	03C3  8B D9					     mov bx, cx
1   791	03C5  B9 0003					     mov cx, key_len - 1
1   792
1   793	03C8						     @@fill_line:
1   794	03C8  AB						     stosw
1   795	03C9  E2 FD						     loop @@fill_line
1   796
1   797	03CB  81 C7 009A				     add di, (80 - (key_len - 1)) * 2
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 15
main.asm



1   798
1   799	03CF  8B CB					     mov cx, bx
1   800	03D1  E2 F0					     loop @@fill
1   801	03D3  C3			     ret
1   802	03D4				     endp
1   803
1   804
1   805
1   806					     ;========================================
1   807					     ; Requires: defined x1, x2, y1, y2
1   808					     ;
1   809					     ; Returns:	 ----
1   810					     ;
1   811					     ; Damages:	 ax, bx, cx, es, di
1   812					     ;========================================
1   813	03D4				     DrawShadowDown proc
1   814	03D4  2D 0010				     sub ax, 16
1   815	03D7  3D 0003				     cmp ax, 3
1   816	03DA  72 08				     jb	@@first
1   817	03DC  3D 0007				     cmp ax, 7
1   818	03DF  72 0B				     jb	@@second
1   819	03E1  EB 14 90				     jmp @@third
1   820
1   821
1   822	03E4				     @@first:
1   823	03E4  BF 082A				     mov di, (80 * (ky1	+ 1) + kx1 + 1)	* 2  ; Coordinates of start
1   824	03E7  8B C8				     mov cx, ax
1   825	03E9  EB 14 90				     jmp @@to_right_key
1   826
1   827	03EC				     @@second:
1   828	03EC  BF 0852				     mov di, (80 * (ky1	+ 1) + kx1 + 1 + 5 * (key_len))	* 2
1   829	03EF  2D 0003				     sub ax, 3
1   830	03F2  8B C8				     mov cx, ax
1   831	03F4  EB 09 90				     jmp @@to_right_key
1   832
1   833	03F7				     @@third:
1   834	03F7  BF 088A				     mov di, (80 * (ky1	+ 1) + kx1 + 1 + 12 * (key_len)) * 2
1   835	03FA  2D 0007				     sub ax, 7
1   836	03FD  8B C8				     mov cx, ax
1   837
1   838
1   839	03FF				     @@to_right_key:
1   840	03FF  83 C7 10				     add di, key_len * 2 * 2
1   841	0402  E2 FB				     loop @@to_right_key
1   842	0404  8B D0				     mov dx, ax
1   843
1   844	0406  B4 5D				     mov ah, 5Dh
1   845	0408  B0 B1				     mov al, shadow_50	     ; Space symbol
1   846
1   847	040A  B9 0007				     mov cx, key_height	- 1
1   848
1   849	040D					     @@fill:
1   850	040D  8B D9					     mov bx, cx
1   851	040F  B9 0003					     mov cx, key_len - 1
1   852
1   853	0412						     @@fill_line:
1   854	0412  AB						     stosw
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 16
main.asm



1   855	0413  E2 FD						     loop @@fill_line
1   856
1   857	0415  81 C7 009A				     add di, (80 - (key_len - 1)) * 2
1   858
1   859	0419  8B CB					     mov cx, bx
1   860	041B  E2 F0					     loop @@fill
1   861
1   862
1   863	041D  C3			     ret
1   864	041E				     endp
1   865
1   866
1   867
1   868					     ;========================================
1   869					     ; Requires: defined kx1, kx2, ky1,	ky2
1   870					     ;
1   871					     ; Returns:	 ----
1   872					     ;
1   873					     ; Damages:	 ax, bx, cx, es, di
1   874					     ;========================================
1   875	041E				     ClearKeys proc
1   876	041E  BF 0788				     mov di, (80 * ky1 + kx1) *	2    ; Coordinates of start
1   877
1   878	0421  B4 00				     mov ah, 00h	     ; Black background
1   879	0423  B0 20				     mov al, 20h	     ; Space symbol
1   880
1   881	0425  B9 0008				     mov cx, ky2 - ky1
1   882
1   883	0428					     @@clear:
1   884	0428  8B D9					     mov bx, cx
1   885	042A  B9 0046					     mov cx, kx2 - kx1
1   886
1   887	042D						     @@clear_line:
1   888	042D  AB						     stosw
1   889	042E  E2 FD						     loop @@clear_line
1   890
1   891	0430  83 C7 14					     add di, (80 - (kx2	- kx1))	* 2
1   892
1   893	0433  8B CB					     mov cx, bx
1   894	0435  E2 F1					     loop @@clear
1   895
1   896	0437  C3			     ret
1   897	0438				     endp
1   898
1   899
1   900
1   901					     ;========================================
1   902					     ; Requires: defined x1, x2, y1, y2
1   903					     ;
1   904					     ; Returns:	 ----
1   905					     ;
1   906					     ; Damages:	 ax, bx, cx, es, di
1   907					     ;========================================
1   908	0438				     DrawKeyBorders proc
1   909	0438  B4 09				     mov ah, 09h		     ; Grey on Black background
1   910
1   911	043A  BF 0788				     mov di, (80 * ky1 + kx1) *	2    ; Coordinates of start
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 17
main.asm



1   912	043D  E8 0035				     call DrawUp
1   913
1   914	0440  E8 000D				     call DrawSides
1   915
1   916	0443  BF 0C88				     mov di, (80 * ky2 + kx1) *	2
1   917	0446  E8 0086				     call DrawDown
1   918
1   919	0449  BF 0AA8				     mov di, (80 * (ky1	+ 5) + kx1) * 2
1   920	044C  E8 0039				     call DrawMid
1   921
1   922	044F  C3			     ret
1   923	0450				     endp
1   924
1   925
1   926
1   927					     ;========================================
1   928					     ; Requires: defined x1, x2, y1, y2
1   929					     ;
1   930					     ; Returns:	 ----
1   931					     ;
1   932					     ; Damages:	 al, cx, di
1   933					     ;========================================
1   934	0450				     DrawSides proc
1   935	0450  B9 0007				     mov cx, key_height	- 1
1   936	0453  E8 00B4				     call DrawVerticalKey
1   937
1   938
1   939	0456  B9 0010				     mov cx, num_keys -	1
1   940	0459  83 C7 08				     add di, key_len*2
1   941	045C				 @@next_side:
1   942	045C  51				     push cx
1   943
1   944	045D  B0 CB				     mov al, triangle_down
1   945	045F  26: 89 05				     mov es:[di], ax
1   946
1   947	0462  B9 0004				     mov cx, key_height	- 4
1   948	0465  E8 00A2				     call DrawVerticalKey
1   949	0468  83 C7 08				     add di, key_len*2
1   950
1   951	046B  59				     pop cx
1   952	046C  E2 EE				     loop @@next_side
1   953
1   954
1   955	046E  B9 0007				     mov cx, key_height	- 1
1   956	0471  E8 0096				     call DrawVerticalKey
1   957	0474  C3			     ret
1   958	0475				     endp
1   959
1   960
1   961
1   962					     ;========================================
1   963					     ; Requires: defined x1, x2, y1, y2
1   964					     ;
1   965					     ; Returns:	 ----
1   966					     ;
1   967					     ; Damages:	 al, cx, di
1   968					     ;========================================
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 18
main.asm



1   969	0475				     DrawUp proc
1   970	0475  B9 0044				     mov cx, key_len * num_keys
1   971	0478  E8 0088				     call DrawHorizontalKey
1   972
1   973	047B  B0 BB				     mov al, ru_corn
1   974	047D  26: 89 85	0088			     mov es:[di	+ key_len * num_keys * 2], ax
1   975
1   976	0482  B0 C9				     mov al, lu_corn
1   977	0484  26: 89 05				     mov es:[di], ax
1   978	0487  C3			     ret
1   979	0488				     endp
1   980
1   981
1   982					     ;========================================
1   983					     ; Requires: defined x1, x2, y1, y2
1   984					     ;
1   985					     ; Returns:	 ----
1   986					     ;
1   987					     ; Damages:	 al, cx, di
1   988					     ;========================================
1   989	0488				     DrawMid proc
1   990	0488  83 C7 08				     add di, (key_len) * 2
1   991	048B  B9 0007				     mov cx, num_dies
1   992
1   993	048E				     @@next_side:
1   994	048E  83 F9 05				     cmp cx, 5
1   995	0491  74 08				     je	skip_side
1   996	0493  83 F9 02				     cmp cx, 2
1   997	0496  74 03				     je	skip_side
1   998	0498  EB 04 90				     jmp fill_side
1   999
1  1000	049B				     skip_side:
1  1001	049B  83 C7 08				     add di, (key_len) * 2
1  1002
1  1003	049E				     fill_side:
1  1004	049E  51				     push cx
1  1005	049F  B0 C8				     mov al, ld_corn
1  1006	04A1  26: 89 05				     mov es:[di], ax
1  1007	04A4  47				     inc di
1  1008	04A5  47				     inc di
1  1009
1  1010	04A6  B9 0003				     mov cx, key_len - 1
1  1011	04A9  E8 0057				     call DrawHorizontalKey
1  1012
1  1013	04AC  47				     inc di
1  1014	04AD  47				     inc di
1  1015	04AE  B0 CB				     mov al, triangle_down
1  1016	04B0  26: 89 05				     mov es:[di], ax
1  1017	04B3  B9 0003				     mov cx, key_height	- 5
1  1018	04B6  E8 0051				     call DrawVerticalKey
1  1019	04B9  B0 CA				     mov al, triangle_up
1  1020	04BB  26: 89 85	01E0			     mov es:[di	+ 80 * (key_height - 5)	* 2], ax
1  1021	04C0  4F				     dec di
1  1022	04C1  4F				     dec di
1  1023
1  1024	04C2  B0 BC				     mov al, rd_corn
1  1025	04C4  26: 89 45	06			     mov es:[di	+ (key_len - 1)	* 2], ax
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 19
main.asm



1  1026
1  1027	04C8  83 C7 0E				     add di, ((key_len)	* 2 - 1) * 2
1  1028
1  1029	04CB  59				     pop cx
1  1030
1  1031	04CC  E2 C0				     loop @@next_side
1  1032
1  1033
1  1034	04CE  C3			     ret
1  1035	04CF				     endp
1  1036
1  1037
1  1038
1  1039					     ;========================================
1  1040					     ; Requires: defined x1, x2, y1, y2
1  1041					     ;
1  1042					     ; Returns:	 ----
1  1043					     ;
1  1044					     ; Damages:	 al, bx, cx, di
1  1045					     ;========================================
1  1046	04CF				     DrawDown proc
1  1047	04CF  B9 0044				     mov cx, key_len * num_keys
1  1048	04D2  E8 002E				     call DrawHorizontalKey
1  1049
1  1050	04D5  B0 CA				     mov al, triangle_up
1  1051	04D7  26: 89 45	60			     mov es:[di	+ key_len * 12 * 2], ax
1  1052
1  1053	04DB  B0 CA				     mov al, triangle_up
1  1054	04DD  26: 89 45	28			     mov es:[di	+ key_len * 5 *	2], ax
1  1055
1  1056	04E1  57				     push di
1  1057	04E2  B9 0003				     mov cx, 3
1  1058	04E5  81 C7 FDA8			     add di, key_len * 5 * 2 - 80 * 4 *	2
1  1059	04E9  E8 001E				     call DrawVerticalKey
1  1060
1  1061	04EC  B9 0003				     mov cx, 3
1  1062	04EF  83 C7 38				     add di, key_len * 7 * 2
1  1063	04F2  E8 0015				     call DrawVerticalKey
1  1064	04F5  5F				     pop di
1  1065
1  1066	04F6  B0 C8				     mov al, ld_corn
1  1067	04F8  26: 89 05				     mov es:[di], ax
1  1068
1  1069	04FB  B0 BC				     mov al, rd_corn
1  1070	04FD  26: 89 85	0088			     mov es:[di	+ key_len * num_keys * 2], ax
1  1071	0502  C3			     ret
1  1072	0503				     endp
1  1073
1  1074
1  1075
1  1076					     ;========================================
1  1077					     ; Requires: Number	of symbols to print in cx
1  1078					     ;
1  1079					     ; Returns:	 ----
1  1080					     ;
1  1081					     ; Damages:	 al, cx, di
1  1082					     ;========================================
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 20
main.asm



1  1083	0503				     DrawHorizontalKey proc
1  1084	0503  B0 CD				     mov al, horiz_side
1  1085
1  1086	0505  57				     push di
1  1087	0506  F3> AB				     rep stosw
1  1088	0508  5F				     pop di
1  1089	0509  C3			     ret
1  1090	050A				     endp
1  1091
1  1092
1  1093
1  1094					     ;========================================
1  1095					     ; Requires: Number	of symbols to print in cx
1  1096					     ;
1  1097					     ; Returns:	 ----
1  1098					     ;
1  1099					     ; Damages:	 al, bx, cx
1  1100					     ;========================================
1  1101	050A				     DrawVerticalKey proc
1  1102	050A  B0 BA				     mov al, vert_side
1  1103	050C  8B DF				     mov bx, di
1  1104	050E				     @@v_symb:
1  1105	050E  81 C7 00A0			     add di, 80*2
1  1106	0512  26: 89 05				     mov es:[di], ax
1  1107	0515  E2 F7				     loop @@v_symb
1  1108
1  1109	0517  8B FB				     mov di, bx
1  1110	0519  C3			     ret
1  1111	051A				     endp
   1112
   1113	051A  14*(??)		     Input:  db	MAX_INP_LEN dup	(?)
   1114
   1115	052E  14*(??)		     Output: db	MAX_OUT_LEN dup	(?)
   1116
   1117	0542			     End_of_Prog:
   1118
   1119					     include mkframe.asm
1  1120					     ;==================================================
1  1121					     ; Requires: defined x1, x2, y1, y2, corners coords
1  1122					     ;			 and frame symbols codes
1  1123					     ;
1  1124					     ; Returns:	 ----
1  1125					     ;
1  1126					     ; Damages:	 ax, bx, cx, es, di
1  1127					     ;==================================================
1  1128	0542				     DrawFrame proc
1  1129
1  1130	0542  06				     push es
1  1131	0543  BB B800				     mov bx, videomem
1  1132	0546  8E C3				     mov es, bx			     ; Jump to videosegment
1  1133
1  1134	0548  E8 0005				     call ClearFrame
1  1135	054B  E8 001C				     call DrawBorders
1  1136	054E  07				     pop es
1  1137
1  1138	054F  C3			     ret
1  1139	0550				     endp
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 21
main.asm



1  1140
1  1141
1  1142
1  1143					     ;========================================
1  1144					     ; Requires: defined x1, x2, y1, y2, corners coords
1  1145					     ;			 and frame symbols codes
1  1146					     ;
1  1147					     ; Returns:	 ----
1  1148					     ;
1  1149					     ; Damages:	 ax, bx, cx, es, di
1  1150					     ;========================================
1  1151	0550				     ClearFrame	proc
1  1152	0550  BF 0144				     mov di, lu_coord	     ; Coordinates of start
1  1153
1  1154	0553  B4 00				     mov ah, 00h	     ; Black background
1  1155	0555  B0 20				     mov al, 20h	     ; Space symbol
1  1156
1  1157	0557  B9 0014				     mov cx, y2	- y1
1  1158
1  1159	055A					     clear:
1  1160	055A  8B D9					     mov bx, cx
1  1161	055C  B9 004A					     mov cx, x2	- x1
1  1162
1  1163	055F						     clear_line:
1  1164	055F  AB						     stosw	     ; mov es:[di], ax / inc di
1  1165	0560  E2 FD						     loop clear_line
1  1166
1  1167	0562  83 C7 0C					     add di, (80 - (x2 - x1)) *	2
1  1168
1  1169	0565  8B CB					     mov cx, bx
1  1170	0567  E2 F1					     loop clear
1  1171
1  1172	0569  C3			     ret
1  1173	056A				     endp
1  1174
1  1175
1  1176
1  1177					     ;========================================
1  1178					     ; Requires: defined x1, x2, y1, y2, corners coords
1  1179					     ;			 and frame symbols codes
1  1180					     ;
1  1181					     ; Returns:	 ----
1  1182					     ;
1  1183					     ; Damages:	 ax, cx, es, di
1  1184					     ;========================================
1  1185	056A				     DrawBorders proc
1  1186	056A  B4 09				     mov ah, 09h     ; Grey on Black background
1  1187
1  1188	056C  BF 0144				     mov di, lu_coord
1  1189	056F  B0 C9				     mov al, lu_corn
1  1190	0571  AB				     stosw
1  1191	0572  E8 002A				     call DrawHorizontalBorder
1  1192
1  1193	0575  BF 0144				     mov di, lu_coord
1  1194	0578  81 C7 00A0			     add di, 80*2
1  1195	057C  E8 0028				     call DrawVerticalBorder
1  1196
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 22
main.asm



1  1197	057F  BF 0DC4				     mov di, ld_coord
1  1198	0582  B0 C8				     mov al, ld_corn
1  1199	0584  AB				     stosw
1  1200	0585  E8 0017				     call DrawHorizontalBorder
1  1201
1  1202	0588  BF 01D8				     mov di, ru_coord
1  1203	058B  81 C7 00A0			     add di, 80*2
1  1204	058F  E8 0015				     call DrawVerticalBorder
1  1205
1  1206	0592  BF 01D8				     mov di, ru_coord
1  1207	0595  B0 BB				     mov al, ru_corn
1  1208	0597  AB				     stosw
1  1209
1  1210	0598  BF 0E58				     mov di, rd_coord
1  1211	059B  B0 BC				     mov al, rd_corn
1  1212	059D  AB				     stosw
1  1213
1  1214	059E  C3			     ret
1  1215	059F				     endp
1  1216
1  1217
1  1218
1  1219					     ;========================================
1  1220					     ; Requires: defined x1, x2, y1, y2, corners coords
1  1221					     ;			 and frame symbols codes
1  1222					     ;
1  1223					     ; Returns:	 ----
1  1224					     ;
1  1225					     ; Damages:	 al, cx, di
1  1226					     ;========================================
1  1227	059F				     DrawHorizontalBorder proc
1  1228	059F  B9 0049				     mov cx, x2	- x1 - 1
1  1229	05A2  B0 CD				     mov al, horiz_side
1  1230
1  1231	05A4  F3> AB				     rep stosw
1  1232
1  1233	05A6  C3			     ret
1  1234	05A7				     endp
1  1235
1  1236
1  1237
1  1238					     ;========================================
1  1239					     ; Requires: defined x1, x2, y1, y2, corners coords
1  1240					     ;			 and frame symbols codes
1  1241					     ;
1  1242					     ; Returns:	 ----
1  1243					     ;
1  1244					     ; Damages:	 al, cx, di
1  1245					     ;========================================
1  1246	05A7				     DrawVerticalBorder	proc
1  1247	05A7  B9 0013				     mov cx, y2	- y1 - 1
1  1248	05AA  B0 BA				     mov al, vert_side
1  1249
1  1250	05AC				     v_symb:
1  1251	05AC  26: 89 05				     mov es:[di], ax
1  1252	05AF  81 C7 00A0			     add di, 80*2
1  1253	05B3  E2 F7				     loop v_symb
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 23
main.asm



1  1254
1  1255	05B5  C3			     ret
1  1256	05B6				     endp
   1257
   1258					     include numproc.asm
1  1259					     ;==================================================================
1  1260					     ; Requires: Input buffer with constant size MAX_INP_LEN (up to 254)
1  1261					     ;
1  1262					     ; Returns:	 Char buffer with beginnig at si + 1, with it's
1  1263					     ;		 length	in [si]
1  1264					     ;
1  1265					     ; Damages:	 ah, si, dx
1  1266					     ;==================================================================
1  1267	05B6				     GetString proc
1  1268
1  1269	05B6  B4 0A				     mov ah, 0ah
1  1270	05B8  BA 051Ar				     mov dx, offset Input
1  1271	05BB  8B F2				     mov si, dx
1  1272	05BD  C6 04 14				     mov byte ptr [si],	MAX_INP_LEN
1  1273
1  1274	05C0  CD 21				     int 21h
1  1275	05C2  46				     inc si
1  1276	05C3  C3			     ret
1  1277	05C4				     endp
1  1278
1  1279
1  1280
1  1281					     ;==================================================================
1  1282					     ; Requires: pointer on buffer in si (where	si + 1 - beginning of the string
1  1283					     ;					   and [si]    - length	of string)
1  1284					     ;
1  1285					     ; Returns:	 number	from the buffer	in ax
1  1286					     ;
1  1287					     ; Damages:	 ax, bx, cx, dx
1  1288					     ;==================================================================
1  1289	05C4				     ReadNumber	proc
1  1290
1  1291	05C4  33 C0				     xor ax, ax
1  1292	05C6  33 C9				     xor cx, cx
1  1293	05C8  33 FF				     xor di, di
1  1294
1  1295	05CA  8A 0C				     mov cl, [si]
1  1296	05CC  8B D1				     mov dx, cx	     ; Сохраняем количество цифр
1  1297	05CE  46				     inc si	     ; Переходим к буфферу
1  1298	05CF  FC				     cld
1  1299
1  1300	05D0  80 2C 30			 store_nums: sub byte ptr [si],	'0'
1  1301	05D3  AC				     lodsb
1  1302	05D4  50				     push ax	     ; Пушим каждую цифру в стек
1  1303	05D5  E2 F9				     loop store_nums
1  1304
1  1305	05D7  8B CA				     mov cx, dx	     ; Возвращаем в cx кол-во цифр
1  1306	05D9  BB 0001				     mov bx, 1	     ; Множитель для первой цифры
1  1307
1  1308	05DC  58		       count_number: pop ax	     ; Считываем новую цифру из	стека
1  1309
1  1310	05DD  F7 E3				     mul bx	     ; Умножаем	цифру на степень 10
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 24
main.asm



1  1311	05DF  03 F8				     add di, ax	     ; Прибавляем произведение к сохранённой сумме (будущему числу)
1  1312
1  1313	05E1  B8 000A				     mov ax, 10	     ; Умножаем	bx на 10
1  1314	05E4  F7 E3				     mul bx
1  1315	05E6  8B D8				     mov bx, ax
1  1316
1  1317	05E8  E2 F2				     loop count_number
1  1318
1  1319
1  1320	05EA  8B C7			       quit: mov ax, di
1  1321
1  1322	05EC  C3			     ret
1  1323	05ED				     endp
1  1324
   1325
   1326				     end     Start
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 25
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/19/21"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "17:57:43"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CLEAR				  Near	 DGROUP:0428
@@CLEAR_LINE			  Near	 DGROUP:042D
@@CONTINUE			  Near	 DGROUP:0389
@@DOWN				  Near	 DGROUP:0386
@@FILL				  Near	 DGROUP:03C3
@@FILL				  Near	 DGROUP:040D
@@FILL_LINE			  Near	 DGROUP:03C8
@@FILL_LINE			  Near	 DGROUP:0412
@@FIRST				  Near	 DGROUP:039C
@@FIRST				  Near	 DGROUP:03E4
@@NEXT_SIDE			  Near	 DGROUP:045C
@@NEXT_SIDE			  Near	 DGROUP:048E
@@SECOND			  Near	 DGROUP:03A4
@@SECOND			  Near	 DGROUP:03EC
@@THIRD				  Near	 DGROUP:03AF
@@THIRD				  Near	 DGROUP:03F7
@@TO_RIGHT_KEY			  Near	 DGROUP:03B7
@@TO_RIGHT_KEY			  Near	 DGROUP:03FF
@@V_SYMB			  Near	 DGROUP:050E
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
A3				  Text	 1193100 / 220
A4				  Text	 1193100 / 440
B3				  Text	 1193100 / 247
B3_FL				  Text	 1193100 / 233
B4				  Text	 1193100 / 494
B4_FL				  Text	 1193100 / 466
BASE_BIN			  Near	 DGROUP:02CC
BASE_DEC			  Near	 DGROUP:02C7
BASE_HEX			  Near	 DGROUP:02D6
BASE_NAME_LEN			  Number 0005
BASE_OCT			  Near	 DGROUP:02D1
BIN				  Near	 DGROUP:028C
C3				  Text	 1193100 / 131
C3_SH				  Text	 1193100 / 139
C4				  Text	 1193100 / 262
C4_SH				  Text	 1193100 / 277
CHANGEINTFUNC			  Near	 DGROUP:01BD
CHECKPRESS_H			  Near	 DGROUP:0133
CHECKRELEASE_H			  Near	 DGROUP:0147
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 26
Symbol Table



CHECKRELEASE_L			  Near	 DGROUP:013D
CHECKUPPRESS_H			  Near	 DGROUP:0158
CHECKUPPRESS_L			  Near	 DGROUP:0151
CHECKUPRELEASE_H		  Near	 DGROUP:016C
CHECKUPRELEASE_L		  Near	 DGROUP:0162
CHOOSE				  Near	 DGROUP:02FA
CLEAN				  Near	 DGROUP:02C1
CLEAR				  Near	 DGROUP:055A
CLEARFRAME			  Near	 DGROUP:0550
CLEARKEYS			  Near	 DGROUP:041E
CLEAR_LINE			  Near	 DGROUP:055F
CMDREG				  Number 0043
CONVERT				  Near	 DGROUP:023B
COUNT_NUMBER			  Near	 DGROUP:05DC
D3				  Text	 1193100 / 147
D4				  Text	 1193100 / 294
DEC				  Near	 DGROUP:0286
DIGIT_PROC			  Near	 DGROUP:023F
DIGIT_PUSH			  Near	 DGROUP:024F
DRAWBORDERS			  Near	 DGROUP:056A
DRAWDOWN			  Near	 DGROUP:04CF
DRAWFRAME			  Near	 DGROUP:0542
DRAWHORIZONTALBORDER		  Near	 DGROUP:059F
DRAWHORIZONTALKEY		  Near	 DGROUP:0503
DRAWKEYBORDERS			  Near	 DGROUP:0438
DRAWKEYPRESS			  Near	 DGROUP:036A
DRAWKEYS			  Near	 DGROUP:035C
DRAWMID				  Near	 DGROUP:0488
DRAWSHADOWDOWN			  Near	 DGROUP:03D4
DRAWSHADOWUP			  Near	 DGROUP:038C
DRAWSIDES			  Near	 DGROUP:0450
DRAWUP				  Near	 DGROUP:0475
DRAWVERTICALBORDER		  Near	 DGROUP:05A7
DRAWVERTICALKEY			  Near	 DGROUP:050A
E3				  Text	 1193100 / 165
E3_FL				  Text	 1193100 / 156
E4				  Text	 1193100 / 330
E4_FL				  Text	 1193100 / 311
EASY				  Near	 DGROUP:025E
END_OF_PROG			  Near	 DGROUP:0542
F3				  Text	 1193100 / 175
F3_SH				  Text	 1193100 / 185
F4				  Text	 1193100 / 349
F4_SH				  Text	 1193100 / 370
FILL_SIDE			  Near	 DGROUP:049E
G3				  Text	 1193100 / 196
G3_SH				  Text	 1193100 / 208
G4				  Text	 1193100 / 392
G4_SH				  Text	 1193100 / 415
GATE2				  Number 0042
GETCODE				  Near	 DGROUP:01A9
GETSTRING			  Near	 DGROUP:05B6
HARD				  Near	 DGROUP:0264
HEX				  Near	 DGROUP:0298
HORIZ_SIDE			  Number 00CD
INPUT				  Near	 DGROUP:051A
KEY_HEIGHT			  Number 0008
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 27
Symbol Table



KEY_LEN				  Number 0004
KX1				  Number 0004
KX2				  Number 004A
KY1				  Number 000C
KY2				  Number 0014
LD_COORD			  Number 0DC4
LD_CORN				  Number 00C8
LOADPROG			  Near	 DGROUP:01D8
LU_COORD			  Number 0144
LU_CORN				  Number 00C9
MAINFREQ			  Text	 1193100
MAX_INP_LEN			  Number 0014
MAX_NUM_LEN			  Number 0013
MAX_OUT_LEN			  Number 0014
NOTESDOWN			  Word	 DGROUP:0348
NOTESUP				  Word	 DGROUP:0336
NUMBERPROCESSING		  Near	 DGROUP:022D
NUMINCHAR			  Near	 DGROUP:0256
NUM_DIES			  Number 0007
NUM_KEYS			  Number 0011
OCT				  Near	 DGROUP:0292
OLD_OFS				  Word	 DGROUP:01A5
OLD_SEG				  Word	 DGROUP:01A7
OUTPUT				  Near	 DGROUP:052E
OUT_SYMB_FORW			  Near	 DGROUP:02B9
P				  Number 000A
PLAYNOTE			  Near	 DGROUP:0319
PORTB				  Number 0061
PRESS				  Near	 DGROUP:0182
PUSHTOVIDEO			  Near	 DGROUP:02A8
QUIT				  Near	 DGROUP:05EA
RD_COORD			  Number 0E58
RD_CORN				  Number 00BC
READNUMBER			  Near	 DGROUP:05C4
RELEASE				  Near	 DGROUP:018B
RESETTIMER			  Near	 DGROUP:032F
RETURN				  Near	 DGROUP:026A
RU_COORD			  Number 01D8
RU_CORN				  Number 00BB
SETNOTE				  Near	 DGROUP:02DB
SETPAUSE			  Near	 DGROUP:0307
SETTIMER			  Near	 DGROUP:030E
SHADOW_30			  Number 00B0
SHADOW_50			  Number 00B1
SHADOW_70			  Number 00B2
SHOWNUMBER			  Near	 DGROUP:01EA
SKIP_SIDE			  Near	 DGROUP:049B
SPACE				  Number 0020
SPECIALEND			  Near	 DGROUP:0194
START				  Near	 DGROUP:0100
STARTPIANO			  Near	 DGROUP:0176
STDEND				  Near	 DGROUP:019E
STOPPIANO			  Near	 DGROUP:017C
STORE_NUMS			  Near	 DGROUP:05D0
TALKTOPORTS			  Near	 DGROUP:01AE
TOXIC				  Near	 DGROUP:0118
TRIANGLE_DOWN			  Number 00CB
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 28
Symbol Table



TRIANGLE_UP			  Number 00CA
UP				  Near	 DGROUP:02F4
VERT_SIDE			  Number 00BA
VIDEOMEM			  Number B800
V_SYMB				  Near	 DGROUP:05AC
WAITHIGH			  Number 0008
WAITING				  Near	 DGROUP:0320
WAITLOW				  Number F9CB
WRITESYSTEM			  Near	 DGROUP:026B
WRITE_BASE			  Near	 DGROUP:029E
X1				  Number 0002
X2				  Number 004C
Y1				  Number 0002
Y2				  Number 0016

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  05ED Word	  Public  CODE
Turbo Assembler	 Version 4.1	    03/19/21 17:57:43	    Page 29
Error Summary



*Warning* numout.asm(163) Reserved word	used as	symbol:	DEC
